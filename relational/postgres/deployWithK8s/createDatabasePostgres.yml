apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 5Gi #in production environenmt consider making more memory available
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  accessModes:
    - ReadWriteOnce #consider using ReadWriteMany for high avaliable clusters
  #in local (dev) usage
  storageClassName: manual
  hostPath:
    path: ~/postgres
  # in production consider using a EBS (AWS)
  # csi:
  #   driver: ebs.csi.aws.com
  #   volumeHandle: vol-1234567890 #id of your EBS
  #   fsType: ext4

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce #consider using ReadWriteMany for high avaliable clusters
  resources:
    requests:
      storage: 5Gi #in production environenmt consider making more memory available
  #storageClassName: high-performance #consider using high-performance in production environment

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
type: Opaque
data:
  password: '123456IsHorriblePass' #USE A STRONG PASSWORD HERE

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: postgres-initdb
data:
  initdb.sql: |-
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-statefulset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16.1
        command: [ "docker-entrypoint.sh", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: postgres-config-hba
          mountPath: /etc/postgresql/hba
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: DB_HOST
          value: postgres
        resources: #in production environment consider using more memory and cpu
          requests:
            memory: "2Gi" 
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        readinessProbe:
          exec:
            command:
              - "psql"
              - "-w"
              - "-U"
              - "postgres"
              - "-d"
              - "postgres"
              - "-c"
              - "SELECT 1"
          initialDelaySeconds: 15
          timeoutSeconds: 2
        livenessProbe:
          exec:
            command:
              - "psql"
              - "-w"
              - "postgres"
              - "-U"
              - "postgres"
              - "-d"
              - "postgres"
              - "-c"
              - "SELECT 1"
          initialDelaySeconds: 45
          timeoutSeconds: 2
        imagePullPolicy: IfNotPresent
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-initdb
        configMap:
          name: postgres-initdb
      - name: postgres-config
        configMap:
          name: my-postgres-config
      - name: postgres-config-hba
        configMap:
          name: my-pg-hba-config


---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---



